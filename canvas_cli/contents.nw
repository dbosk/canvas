This chapter provides the subcommand [[contents]], which manages content in a 
course.

\section{The [[contents]] subcommand and its options}

We add the subparser for [[contents]].
<<add arguments>>=
contents_parser = subp.add_parser("contents",
    help="Lists contents of a course")
contents_parser.set_defaults(func=contents_command)
add_course_options(contents_parser)
@ Now, that [[contents_command]] function must take two arguments: [[canvas]] 
and [[args]].
We use [[process_course_options]] to parse the options that we added with the 
[[add_course_options]] function above.
<<functions>>=
def contents_command(canvas, args):
  course_list = process_course_options(canvas, args)
  <<get contents and print them>>
@

\subsection{Get and print the list of contents}

By default, we simply list the contents of the course.
We start with the modules and do a depth-first search through the 
contents.
<<get contents and print them>>=
for course in course_list:
  print(format_course(course), end="")
@

The format functions place their output in a string and returns it.
This way the calling function can concatenate the outputs.
We also want to specify some indentation using the [[indent]] parameter.
<<functions>>=
def format_course(course, indent=""):
  out = f"{indent}{course.course_code} {course.name}\n"
  for module in course.get_modules():
    out += format_module(module)
  return out

def format_module(module, indent="  "):
  out = f"{indent}{module.name}\n"
  for item in module.get_module_items():
    out += format_item(item)
  return out

def format_item(item, indent="    "):
  return f"{indent}{item.type:12s} {item.title}\n"
@
