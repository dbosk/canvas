\section{Listing our users}

This module simply lists the users of a course on Canvas in a format that is 
aligned with the UNIX-philosophy, i.e.~can easily be used in scripts.

This module provides two things.
First, it provides a set of functions that will return a list of our Canvas 
users based on some parameters.
Second, it provides a command-line interface to (some of) those functions 
(Sect.~\ref{command-line-interface}).

<<users.py>>=
#!/bin/env python3
"""Lists the users of a course."""

import courses

import argparse
from canvasapi import Canvas
import os
import re
import sys
import traceback

<<functions>>

<<command-line interface>>
@


\section{Producing a list of users}%
\label{list-users-function}

We provide the following functions:
\begin{itemize}
  \item [[list_students]], which returns a list of enrolled students;
  \item [[list_teachers]], which returns a list of teachers;
  \item [[list_users]], which is a general function that also takes a list of 
  roles.
\end{itemize}

First, we provide the most general function, [[list_users]], which takes a list 
of courses and a list of Canvas roles as argument.
<<functions>>=
def list_users(courses, roles):
  for course in courses:
    users = course.get_users(enrollment_type=roles)
    for user in users:
      yield user
@

Now, we can define the function~[[list_students]] in terms of 
[[list_users]].
<<functions>>=
def list_students(courses):
  return list_users(courses, ["student"])

def list_teachers(courses):
  return list_users(courses, ["teacher"])
@


\section{A command-line interface}%
\label{command-line-interface}

If we run this script as a program, we want to provide a command-line 
interface.
<<command-line interface>>=
def main(argv):
  <<main body>>

if __name__ == "__main__":
  try:
    main(sys.argv)
    sys.exit(0)
  except Exception as e:
    err(-1, e)
@ We pass the command-line arguments as [[argv]] to the [[main]] function, 
instead of using [[sys.argv]] directly.
This way, if we use this script as a subcommand, we can filter that part away.

We want uniform error handling.
We will use the following function [[err]], which is inspired by err(3) in the 
BSD world.
<<functions>>=
def err(rc, msg):
  print(f"{sys.argv[0]}: error: {msg}", file=sys.stderr)
  traceback.print_exc(files=sys.stderr)
  sys.exit(rc)
@

If we run this program, we must first set up a [[canvas]] object, then process 
the command-line arguments and finally run the list-users function.
<<main body>>=
<<set up canvas object>>
<<process command-line options>>
<<get the list of users>>
<<print the list of users>>
@

\subsection{Accessing Canvas}

We will use the [[canvasapi]] module.
This module must be installed by running [[pip install canvasapi]].
We keep the settings in the environment, this also requires the [[os]] module.
Now we can set up the [[canvas]] object, through which we access everything in 
Canvas.
<<set up canvas object>>=
API_URL = os.environ["CANVAS_SERVER"]
API_KEY = os.environ["CANVAS_TOKEN"]

canvas = Canvas(API_URL, API_KEY)
@

\subsection{Process command-line options}

We'll use [[argparse]] to parse the command-line options.
Remember that we process [[argv]] passed to the function, not [[sys.argv]] 
directly.
<<process command-line options>>=
argp = argparse.ArgumentParser(description="List users of a course.")
<<add arguments>>
args = argp.parse_args(argv[1:])
<<check arguments>>
@

\subsubsection{Selecting the course}

We provide two ways to identify a course: by Canvas' ID number, which is 
unique, or by matching the course name and course code against a regular 
expression.
We need a course, so we require one of these options, but not both.
<<add arguments>>=
course_args = argp.add_mutually_exclusive_group(required=True)
course_args.add_argument("-i", "--course-identifier", type=int,
  help="Select course by Canvas unique identifier")
course_args.add_argument("-c", "--course-regex",
  help="Filter courses by regular expression")
@

When we check for either of these arguments, we set up the [[course]] object 
that will be used in [[<<get the list of users>>]].
<<check arguments>>=
if args.course_identifier:
  course_list = [canvas.get_course(args.course_identifier)]
elif args.course_regex:
  course_list = courses.filter_courses(canvas, args.course_regex)
@

\subsubsection{Selecting the type of users}

We also want to be able to filter out the type of users.
For now, we focus on students and teachers.
<<add arguments>>=
argp.add_argument("-s", "--students", action="store_true",
  help="Include students.")
argp.add_argument("-t", "--teachers", action="store_true",
  help="Include teachers.")
argp.add_argument("-a", "--assistants", action="store_true",
  help="Include teaching assistants.")
@

We want students by default, if the user doesn't specify anything.
Otherwise, we add them together.
<<check arguments>>=
roles = []
if args.students:
  roles.append("student")
if args.teachers:
  roles.append("teacher")
if args.assistants:
  roles.append("ta")
@


\subsection{Get and print the list of users}

We then simply call the list-users function with the [[canvas]] object as the 
parameter.
<<get the list of users>>=
users = list_users(course_list, roles)
@

Now we can format the list of users and print them.
<<print the list of users>>=
for user in users:
  print(f"{user.id}\t{user.email}\t{user.name}")
@

