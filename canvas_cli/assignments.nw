This chapter provides the subcommand [[assignments]], which lists the 
assignments of a given course.

\section{The subcommand and its options}

We add the subparser for [[assignments]].
<<add arguments>>=
assignments_parser = subp.add_parser("assignments",
    help="Lists assignments of a course")
assignments_parser.set_defaults(func=assignments_command)
<<set up options for selecting courses for assignments>>
<<set up options for selecting type of assignments>>
@ Now, that [[assignments_command]] function must take two arguments: 
[[canvas]] and [[args]].
<<functions>>=
def assignments_command(canvas, args):
  <<process options for selecting courses for assignments>>
  <<get assignments and print them>>
@ We will cover the set up and processing of the options in the following 
subsections.

\subsection{Selecting the course}

We provide two ways to identify a course: by Canvas' ID number, which is 
unique, or by matching the course name and course code against a regular 
expression.
We need a course, so we require one of these options, but not both.
<<set up options for selecting courses for assignments>>=
course_args = assignments_parser.add_mutually_exclusive_group(required=True)
course_args.add_argument("-i", "--course-identifier", type=int,
  help="Select course by Canvas unique identifier")
course_args.add_argument("-c", "--course-regex",
  help="Filter courses by regular expression")
@

When we check for either of these arguments, we set up the [[course]] object 
that will be used in [[<<get the list of users>>]].
<<process options for selecting courses for assignments>>=
if args.course_identifier:
  course_list = [canvas.get_course(args.course_identifier)]
elif args.course_regex:
  course_list = filter_courses(canvas, args.course_regex)
@ We use the [[filter_courses]] from \cref{filter-courses}.


\subsection{Selecting the type of assignments}

We also want to be able to filter out the type of assignments.
For now, we focus on all or ungraded.
<<set up options for selecting type of assignments>>=
assignments_parser.add_argument("-u", "--ungraded", action="store_true",
  help="Show only ungraded assignments.")
@ We don't need to do any particular processing for this option.


\subsection{Get and print the list of assignments}

We then simply call the list-assignments function with the [[courses_list]] 
object as a parameter.
Then we will print the most useful attributes (identifiers) of an assignment.
<<get assignments and print them>>=
if args.ungraded:
  assignments = list_ungraded_assignments(course_list)
else:
  assignments = list_assignments(course_list)
for assignment in assignments:
  print(f"{assignment.id}\t{assignment.name}")
@


\section{Producing a list of assignments}%
\label{list-assignments-function}

We provide the following functions:
\begin{itemize}
  \item [[list_assignments]], which returns all assignments;
  \item [[list_ungraded_assignments]], which returns all ungraded assignments.
\end{itemize}
We return the assignments for a list of courses, since we can match several 
courses with a regular expression (using [[filter_courses]]).
<<functions>>=
def list_assignments(courses):
  for course in courses:
    assignments = course.get_assignments()
    for assignment in assignments:
      yield assignment

def list_ungraded_assignments(courses):
  for course in courses:
    assignments = course.get_assignments(bucket="ungraded")
    for assignment in assignments:
      yield assignment
@

