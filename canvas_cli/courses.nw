This chapter provides everything related to courses.
Firstly, it provides the [[courses]] subcommand.
Secondly, it provides some useful functions for working with courses that will 
be used by the other subcommands.


\section{The subcommand and its options}

We provide a subcommand, [[courses]].
When invoked, we will call the function [[courses_command]] (defined below).
<<add arguments>>=
courses_parser = subp.add_parser("courses", help="Lists your courses")
courses_parser.set_defaults(func=courses_command)
@ At the moment it doesn't have any options.



\section{Producing a list of courses, [[courses_command]]}%
\label{list-courses-function}

We provide the function~[[courses_command]] which will be called by the main 
argument parser.
<<functions>>=
def courses_command(canvas, args):
  courses = canvas.get_courses()
  <<print the list of courses>>
@

Now we can format the list of courses and print them.
We want to provide a POSIX-tools friendly print-out, so we'll use tab-separated 
values.
The useful values are
the Canvas ID ([[course.id]]),
the course code (unique and human comprehensible),
the course name (for humans).
<<print the list of courses>>=
for course in courses:
  print(f"{course.id}\t{course.course_code}\t{course.name}")
@



\section{Find course based on course code}%
\label{search-course-code}
\label{filter-courses}

We provide the function~[[filter_courses]] that will filter the list of courses 
based on a regular expression~[[regex]].
<<functions>>=
def filter_courses(canvas, regex):
  courses = canvas.get_courses()
  p = re.compile(regex)
  for course in courses:
    <<yield course matching regex>>
@

We will match a course if the [[regex]] (compiled into [[p]]) will match any of 
the attributes [[course_code]] or [[name]] of a course.
<<yield course matching regex>>=
if p.match(course.name):
  yield course
elif p.match(course.course_code):
  yield course
@

