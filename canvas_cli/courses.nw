\section{Listing our courses}

This module simply lists the user's courses on Canvas in a format that is 
aligned with the UNIX-philosophy, i.e.~can easily be used in scripts.

This module provides two things.
First, it provides a set of functions that will return a list of our Canvas 
courses based on some parameters.
Second, it provides a command-line interface to (some of) those functions 
(Sect.~\ref{command-line-interface}).

<<courses.py>>=
#!/bin/env python3
"""Lists our courses."""

from canvasapi import Canvas
import os
import re
import sys

<<functions>>

<<command-line interface>>
@


\section{Producing a list of courses, [[list_courses]]}%
\label{list-courses-function}

We provide the function~[[list_courses]] which returns a list of courses.
<<functions>>=
def list_courses(canvas):
  return canvas.get_courses()
@


\section{Find course based on course code}%
\label{search-course-code}

We provide the function~[[filter_courses]] that will filter the list of courses 
based on a regular expression~[[regex]].
<<functions>>=
def filter_courses(canvas, regex):
  courses = list_courses(canvas)
  p = re.compile(regex)
  for course in courses:
    <<yield course matching regex>>
@

We will match a course if the [[regex]] (compiled into [[p]]) will match any of 
the attributes [[course_code]] or [[name]] of a course.
<<yield course matching regex>>=
if p.match(course.name):
  yield course
elif p.match(course.course_code):
  yield course
@


\section{A command-line interface}%
\label{command-line-interface}

If we run this script as a program, we want to provide a command-line 
interface.
<<command-line interface>>=
def main():
  <<main body>>

if __name__ == "__main__":
  try:
    main()
    sys.exit(0)
  except Exception as e:
    err(-1, e)
@

We want uniform error handling.
We will use the following function [[err]], which is inspired by err(3) in the 
BSD world.
<<functions>>=
def err(rc, msg):
  print(f"{sys.argv[0]}: error: {msg}", file=sys.stderr)
  sys.exit(rc)
@

If we run this program, we must first set up a [[canvas]] object, then process 
the command-line arguments and finally run the list-courses function.
<<main body>>=
<<set up canvas object>>
<<get the list of courses>>
<<print the list of courses>>
@

\subsection{Accessing Canvas}

We will use the [[canvasapi]] module.
This module must be installed by running [[pip install canvasapi]].
We keep the settings in the environment, this also requires the [[os]] module.
Now we can set up the [[canvas]] object, through which we access everything in 
Canvas.
<<set up canvas object>>=
API_URL = os.environ["CANVAS_SERVER"]
API_KEY = os.environ["CANVAS_TOKEN"]

canvas = Canvas(API_URL, API_KEY)
@

\subsection{Get and print the list of courses}

We then simply call the list-courses function with the [[canvas]] object as the 
parameter.
<<get the list of courses>>=
courses = list_courses(canvas)
@

Now we can format the list of courses and print them.
<<print the list of courses>>=
for course in courses:
  print(f"{course.id}\t{course.course_code}\t{course.name}")
@

