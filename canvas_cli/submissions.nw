This chapter provides the subcommand [[submissions]], which lists the 
submissions of a given assignment.

\section{The subcommand and its options}

We add the subparser for [[submissions]].
<<add arguments>>=
submissions_parser = subp.add_parser("submissions",
    help="Lists submissions of an assignment",
    description="Output format: <Canvas-user-ID> <Canvas-submission-ID>")
submissions_parser.set_defaults(func=submissions_command)
<<set up options for selecting assignment for submissions>>
<<set up options for selecting type of submissions>>
@ Now, that [[submissions_command]] function must take two arguments: 
[[canvas]] and [[args]].
<<functions>>=
def submissions_command(canvas, args):
  <<process options for selecting assignment for submissions>>
  <<get submissions and print them>>
@ We will cover the set up and processing of the options in the following 
subsections.

\subsection{Selecting the assignment}

We provide two ways to identify an assignment: by Canvas' ID number, which is 
unique.
We don't match the assignment name against a regular expression, since then 
we'd first need to identify the course.
<<set up options for selecting assignment for submissions>>=
submissions_parser.add_argument("-i", "--assignment-identifier",
    required=True,
    help="Select assignment by course:assignment identifier")
@

When we check for this option, we fetch the assignment object that will be used 
in [[<<get the list of submissions>>]].
Note that these identifiers are colon-separated, the first part is the course 
and the second is the assignment within the course --- we need both.
<<process options for selecting assignment for submissions>>=
try:
  course_id, assignm_id = args.assignment_identifier.split(":")
  course = canvas.get_course(int(course_id))
  assignment = course.get_assignment(int(assignm_id))
except ValueError:
  raise Exception("the identifier must be two colon-separated integers")
@


\subsection{Selecting the type of submissions}

We also want to be able to filter out the type of submissions.
For now, we focus on all or ungraded.
<<set up options for selecting type of submissions>>=
submissions_parser.add_argument("-u", "--ungraded", action="store_true",
  help="Show only ungraded submissions.")
submissions_parser.add_argument("-g", "--grouped", action="store_true",
  help="Group submissions by student groups")
@ We don't need to do any particular processing for this option.


\subsection{Get and print the list of submissions}

We then simply call the list-submissions function with the [[assignments_list]] 
object as a parameter.
Then we will print the most useful attributes (identifiers) of a submission.
<<get submissions and print them>>=
submissions = assignment.get_submissions()
for submission in submissions:
  print(f"{submission.id}\t{submission.user_id}")
@


\section{Producing a list of submissions}%
\label{list-submissions-function}

We provide the following functions:
\begin{itemize}
  \item [[list_submissions]], which returns all submissions;
  \item [[list_ungraded_submissions]], which returns all ungraded submissions.
\end{itemize}
We return the submissions for a list of assignments, since we can match several 
assignments with a regular expression (using [[filter_assignments]]).
<<functions>>=
def list_submissions(assignments):
  for assignment in assignments:
    submissions = assignment.get_submissions()
    for submission in submissions:
      yield submission

def list_ungraded_submissions(assignments):
  for assignment in assignments:
    submissions = assignment.get_submissions(bucket="ungraded")
    for submission in submissions:
      yield submission
@

